import telebot
import asyncio
from log import logger
from telebot import types
from config import TOKEN
from scheduler import start_scheduler
from questions import questions_a0, questions_a1, questions_a2
from func import calculate_score, translate_and_send_response, send_answer_ai, get_voice_message,\
    delete_punctuation_marks, get_tasks, check_complete_task
from database import create_table, user_exists, create_user, get_user_state, set_user_state,\
    get_question_number, set_question_number, get_right_answers, set_right_answers,\
    create_user_answers, user_answers_exists, get_right_text_phrase, get_phrases, set_phrases, get_difficulty_lvl,\
    user_audio_promotion_exists, create_user_audio_promotion, user_daily_tasks_exists, create_user_daily_tasks,\
    get_progress_conversation, set_progress_conversation,\
    get_progress_translating, set_progress_translating,\
    get_progress_listening, set_progress_listening, get_progress_tests, set_progress_tests, get_days_completed


# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–¥, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
create_table()

bot = telebot.TeleBot(TOKEN)

# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ—Ä–∞–∑—É –¥–Ω—è –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
start_scheduler(bot)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=["start", "help"])
def welcome(message: telebot.types.Message):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä–µ–∂–∏–º–æ–≤
    set_user_state(message.chat.id, None)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–æ–ª-–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤
    set_question_number(message.chat.id, None), set_right_answers(message.chat.id, None)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=True)
    item1 = types.KeyboardButton("üó£Ô∏è –û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞")
    item2 = types.KeyboardButton("üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
    item3 = types.KeyboardButton("üëÇ –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    item4 = types.KeyboardButton("‚úçÔ∏è –¢–µ—Å—Ç—ã")
    item5 = types.KeyboardButton("üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
    item6 = types.KeyboardButton("‚ÅâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    markup.add(item1, item2, item3, item4, item5, item6)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user_exists(message.chat.id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        create_user(message.chat.id, message.chat.first_name, message.chat.last_name, message.chat.username, state=None)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–µ–π –≤ –±–¥ –¥–ª—è –¥–µ–π–ª–∏–∫–æ–≤
    if not user_daily_tasks_exists(message.chat.id):
        create_user_daily_tasks(message.chat.id)

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.chat.first_name}! üåü\n\n"
                                      f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≥–¥–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!\n\n"
                                      f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–µ–∂–∏–º –∏ –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä —è–∑—ã–∫–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚ú®üöÄ",
                     reply_markup=markup)
    logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')


@bot.message_handler(commands=["daily"])
def daily(message: telebot.types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=True)
    start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
    markup.add(start_button)
    if get_days_completed(message.chat.id) % 7 == 0 and get_days_completed(message.chat.id) != 0:
        bot.send_message(message.chat.id,
                         f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ {get_days_completed(message.chat.id)} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! üéâ\n"
                         f"–í–∞—à–µ —É–ø–æ—Ä—Å—Ç–≤–æ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –±–æ–ª—å—à–æ–≥–æ —É–≤–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥, –∏ –≤–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –±–∞—Ä—å–µ—Ä—ã! üöÄ\n\n"
                         f"–í –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –º—ã —Ö–æ—Ç–∏–º –≤—Ä—É—á–∏—Ç—å –≤–∞–º –ø—Ä–∏–∑ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @Sanechka757, –∏ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º. üéÅ\n"
                         f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –í–∞—à –≤–∫–ª–∞–¥ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –æ—á–µ–Ω—å —Ü–µ–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üôå",
                         reply_markup=markup, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑ üòî\n'
                                          '–ü—Ä–∏–∑—ã –≤—ã–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥.\n'
                                          '–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –ø—Ä–∏–∑! üí™')


# –†–µ–∂–∏–º "–†–∞–∑–≥–æ–≤–æ—Ä —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞"
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "conversation")
def conversation_handler(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        set_user_state(message.chat.id, None)
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–µ–∂–∏–º–∞ "–û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞"')
        welcome(message)
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º –Ω–∞ 1 –¥–ª—è –¥–µ–π–ª–∏–∫–æ–≤
        progress = get_progress_conversation(message.chat.id)
        set_progress_conversation(message.chat.id, progress + 1)

        loading_message = bot.send_message(message.chat.id, "ü´† –ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        response = asyncio.run(send_answer_ai(bot, message, loading_message))

        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | "–û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞" | {message.chat.first_name} - {message.text} | –ë–æ—Ç - {response}')

        check_complete_task(bot, message)


# –†–µ–∂–∏–º "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "translating")
def translater(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        set_user_state(message.chat.id, None)
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–µ–∂–∏–º–∞ "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"')
        welcome(message)
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –Ω–∞ 1 –¥–ª—è –¥–µ–π–ª–∏–∫–æ–≤
        progress = get_progress_translating(message.chat.id)
        set_progress_translating(message.chat.id, progress + 1)

        loading_message = bot.send_message(message.chat.id, "ü´† –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        translate_text = asyncio.run(translate_and_send_response(bot, message, loading_message))
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫" | {message.chat.first_name} - {message.text} | –ë–æ—Ç - {translate_text}')

        check_complete_task(bot, message)


# –†–µ–∂–∏–º "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "listening")
def listening_handler(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        set_user_state(message.chat.id, None)
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–µ–∂–∏–º–∞ "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"')
        welcome(message)
    elif message.text in ["üòå –õ–µ–≥–∫–æ", "üòê –°—Ä–µ–¥–Ω–µ", "ü§Ø –°–ª–æ–∂–Ω–æ"]:
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –í—ã–±–∏—Ä–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å {message.text} –≤ —Ä–µ–∂–∏–º–µ "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"')

        if not user_audio_promotion_exists(message.chat.id):  # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ—Ä–∞–∑ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
            create_user_audio_promotion(message.chat.id)

        loading_message = bot.send_message(message.chat.id, " ü´† –ë–æ—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        voice_phrase = get_voice_message(message)

        if voice_phrase:
            logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–∑—É "{get_right_text_phrase(message.chat.id)}" –≤ —Ä–µ–∂–∏–º–µ "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"')

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            start_button = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            markup.add(start_button)

            set_user_state(message.chat.id, 'audio_answer')
            bot.send_voice(message.chat.id, voice=voice_phrase, reply_markup=markup)
            bot.edit_message_text(chat_id=message.chat.id, message_id=loading_message.message_id,
                                  text="‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!")
        else:
            logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –Ω–∞–ø–∏—Å–∞–ª(–∞) –≤—Å–µ —Ñ—Ä–∞–∑—ã —É—Ä–æ–≤–Ω—è {message.text} –≤ —Ä–µ–∂–∏–º–µ "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ".')
            bot.send_message(message.chat.id, "–í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ, Well done üëç")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ñ—Ä–∞–∑—É
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "audio_answer")
def check_phrase(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –û–±—Ä–∞—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
        set_user_state(message.chat.id, None)
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∂–∏–º–µ "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"')
        return handle_text(message, audio=True)

    # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    right_answer = delete_punctuation_marks(get_right_text_phrase(message.chat.id))
    answer_from_user = delete_punctuation_marks(message.text)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª
    if right_answer == answer_from_user:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ 1 –¥–ª—è –¥–µ–π–ª–∏–∫–æ–≤
        progress = get_progress_listening(message.chat.id)
        set_progress_listening(message.chat.id, progress + 1)

        bot.send_message(message.chat.id, "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ—Ä–∞–∑—É –≤–µ—Ä–Ω–æ, –æ—Ç–ª–∏—á–Ω–æ ‚úÖ")
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –¥–∞—ë—Ç –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ" - {message.text}')

        check_complete_task(bot, message)

        # –£–¥–∞–ª—è–µ–º –≤–µ—Ä–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
        difficulty_lvl = get_difficulty_lvl(message.chat.id)
        phrases = get_phrases(message.chat.id, difficulty_lvl)
        phrases.remove(get_right_text_phrase(message.chat.id))
        set_phrases(message.chat.id, difficulty_lvl, phrases)
    else:
        bot.send_message(message.chat.id, f"–í—ã –æ—à–∏–±–ª–∏—Å—å ‚ùå\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - {get_right_text_phrase(message.chat.id)}")
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –¥–∞—ë—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ" - {message.text}')

    # –û–±—Ä–∞—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
    set_user_state(message.chat.id, None)
    logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∂–∏–º–µ "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"')
    handle_text(message, audio=True)


# –†–µ–∂–∏–º "–¢–µ—Å—Ç—ã"
@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "tests")
def choice_test(message: telebot.types.Message):                                        # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–µ–∂–∏–º–∞ "–¢–µ—Å—Ç—ã"')
        welcome(message)
    elif message.text in ["üòá A0", "üòå A1", "üòê A2"]:
        message.text = message.text.split()[1]
        set_user_state(message.chat.id, f"test_{message.text.lower()}")
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–∞ {message.text}")
        logger.info(f"{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤—ã–±–∏—Ä–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–∞ {message.text}")
        if not user_answers_exists(message.chat.id):
            create_user_answers(message.chat.id, None, None)  # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–¥—Å—á—ë—Ç–∞ –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        start_test(message)
    elif message.text in ["üò¨ B1", "üò® B2", "üò∞ C1", "ü§Ø C2"]:
        bot.send_message(message.chat.id,
                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –µ—â—ë –Ω–µ –ø—Ä–∏–¥—É–º–∞–Ω ü•∫\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ üòâ")
        logger.info(f"{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ—Å—Ç {message.text}, –º–æ–∂–µ—Ç –ø–æ—Ä–∞ –±—ã —É–∂–µ –ø—Ä–∏–¥—É–º–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç?")


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) in ["test_a0", "test_a1", "test_a2"])
def start_test(message: telebot.types.Message):                 # –ó–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–≤–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ç–µ—Å—Ç–∞ {get_user_state(message.chat.id)}')
        set_user_state(message.chat.id, None)
        return welcome(message)
    elif get_user_state(message.chat.id) == 'test_a0':
        set_user_state(message.chat.id, 'test_a0_answers')
        test = questions_a0
    elif get_user_state(message.chat.id) == 'test_a1':
        set_user_state(message.chat.id, 'test_a1_answers')
        test = questions_a1
    elif get_user_state(message.chat.id) == 'test_a2':
        set_user_state(message.chat.id, 'test_a2_answers')
        test = questions_a2

    question_number = get_question_number(message.chat.id)
    right_questions = get_right_answers(message.chat.id)

    if question_number < len(test):
        # –í—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
        question = test[question_number]["question"]
        options = test[question_number]["options"]

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for option in options:
            markup.add(types.KeyboardButton(option))

        bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å: {question_number + 1}/{len(test)}\n\n*{question}*",
                         reply_markup=markup, parse_mode='Markdown')
        logger.info(f"{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | {question_number + 1}/{len(test)} - –ë–æ—Ç –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å - {question}")
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–æ–≤ –Ω–∞ 1 –¥–ª—è –¥–µ–π–ª–∏–∫–æ–≤ –µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –∑–∞ —Ç–µ—Å—Ç –±–æ–ª—å—à–µ 70%
        if (100 * right_questions) / len(test) >= 70:
            progress = get_progress_tests(message.chat.id)
            set_progress_tests(message.chat.id, progress + 1)

        set_question_number(message.chat.id, None), set_right_answers(message.chat.id, None)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)

        result = calculate_score(len(test), right_questions)
        bot.send_message(message.chat.id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {right_questions}/{len(test)}\n\n{result}",
                         reply_markup=markup)
        logger.info(
            f"{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {right_questions}/{len(test)} | {result}")

        check_complete_task(bot, message)


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) in ["test_a0_answers", "test_a1_answers", "test_a2_answers"])
def handle_test_answer(message: telebot.types.Message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ç–µ—Å—Ç–∞ {get_user_state(message.chat.id)}')
        set_user_state(message.chat.id, None)
        set_question_number(message.chat.id, None), set_right_answers(message.chat.id, None)
        return welcome(message)
    elif get_user_state(message.chat.id) == "test_a0_answers":
        set_user_state(message.chat.id, "test_a0")
        test = questions_a0
    elif get_user_state(message.chat.id) == "test_a1_answers":
        set_user_state(message.chat.id, "test_a1")
        test = questions_a1
    elif get_user_state(message.chat.id) == "test_a2_answers":
        set_user_state(message.chat.id, "test_a2")
        test = questions_a2

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
    next_button = types.KeyboardButton("–î–∞–ª–µ–µ ‚û°Ô∏è")
    markup.add(start_button, next_button)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    question_number = get_question_number(message.chat.id)
    right_questions = get_right_answers(message.chat.id)

    correct_option = test[question_number]["correct_option"]
    user_answer = message.text
    logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –¥–∞—ë—Ç –æ—Ç–≤–µ—Ç - {user_answer}')

    if user_answer == correct_option:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        right_questions += 1
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç", reply_markup=markup)
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!')
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
        bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option} üëé", reply_markup=markup)
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –¥–∞—ë—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!')

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    set_question_number(message.chat.id, question_number + 1), set_right_answers(message.chat.id, right_questions)


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "feedback")
def handle_feedback(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞')
        welcome(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)

        logger.warning(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –û—Å—Ç–∞–≤–ª—è–µ—Ç feedback | {message.text}')
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, –≤–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω üìù\n"
                                          "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ –∏–¥–µ–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –¥–µ–ª–∏—Ç—å—Å—è. –í–∞—à –≤–∫–ª–∞–¥ —Ü–µ–Ω–µ–Ω!",
                         reply_markup=markup)


@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "daily")
def handle_daily(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"')
        welcome(message)


@bot.message_handler(content_types=["text"])
def handle_text(message: telebot.types.Message, audio=False):
    if message.text == "üó£Ô∏è –û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞":
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º "–û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞"')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        set_user_state(message.chat.id, None)
        set_user_state(message.chat.id, "conversation")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)

        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º *"–û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞"* üó£Ô∏è\n\n'
                                          '–ó–¥–µ—Å—å –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –±–µ—Å–∫—Ä–∞–π–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–º, –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ! üöÄ\n\n'
                                          '–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥, –≤–≤–µ–¥—è –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ –¥–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Ä–∞—Å–∫—Ä–æ–µ–º —á–∞—Ä—É—é—â–∏–π –º–∏—Ä —è–∑—ã–∫–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è. üåçüí¨\n\n'
                                          '–ñ–¥—É –≤–∞—à–∏—Ö —Å–ª–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!',
                         reply_markup=markup, parse_mode='Markdown')
    elif message.text == "üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫":
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        set_user_state(message.chat.id, None)
        set_user_state(message.chat.id, "translating")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)

        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º *"–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"* üåê!\n\n'
                                          '–ó–¥–µ—Å—å –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥, –Ω–æ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –µ–≥–æ –∫—É–ª—å—Ç—É—Ä—ã.\n\n'
                                          '–î–∞–π—Ç–µ –≤–æ–ª—é –≤–∞—à–µ–º—É –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤—É, –∏ –≤–º–µ—Å—Ç–µ –º—ã –æ—Ç–∫—Ä–æ–µ–º –¥–≤–µ—Ä–∏ –∫ –±–µ—Å–∫—Ä–∞–π–Ω–µ–º—É –æ–∫–µ–∞–Ω—É –∑–Ω–∞–Ω–∏–π! üåäüîì\n\n'
                                          '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üìù',
                         reply_markup=markup, parse_mode='Markdown')
    elif message.text == "‚úçÔ∏è –¢–µ—Å—Ç—ã":
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º "–¢–µ—Å—Ç—ã"')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        set_user_state(message.chat.id, None)
        set_user_state(message.chat.id, "tests")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        a0 = types.KeyboardButton("üòá A0")
        a1 = types.KeyboardButton("üòå A1")
        a2 = types.KeyboardButton("üòê A2")
        b1 = types.KeyboardButton("üò¨ B1")
        b2 = types.KeyboardButton("üò® B2")
        c1 = types.KeyboardButton("üò∞ C1")
        c2 = types.KeyboardButton("ü§Ø C2")
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(a0, a1, a2, b1, b2, c1, c2, start_button)

        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π —Ä–µ–∂–∏–º *"–¢–µ—Å—Ç—ã"* üìù!\n\n'
                                          '–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è, –ø—Ä–æ–π–¥—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º —Ç–µ–º–∞–º. üåêüß†\n'
                                          '–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤—ã–∑–æ–≤—É —É–º–∞, –∏ –¥–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø—Ä–æ–π–¥–µ–º —ç—Ç–æ—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∑–Ω–∞–Ω–∏–π! üöÄüí°\n\n'
                                          '–î–∞–≤–∞–π—Ç–µ —É–∑–Ω–∞–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º. üåüü§î\n\n'
                                          '–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ! üåàüåê',
                         reply_markup=markup, parse_mode='Markdown')
    elif message.text == "üëÇ –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ" or audio:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è audio True, –∑–Ω–∞—á–∏—Ç –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        set_user_state(message.chat.id, None)
        set_user_state(message.chat.id, "listening")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        easy_lvl = types.KeyboardButton("üòå –õ–µ–≥–∫–æ")
        medium_lvl = types.KeyboardButton("üòê –°—Ä–µ–¥–Ω–µ")
        hard_lvl = types.KeyboardButton("ü§Ø –°–ª–æ–∂–Ω–æ")
        markup.add(easy_lvl, medium_lvl, hard_lvl, start_button)

        if not audio:
            logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"')

            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º *"–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"*! üëÇ\n\n'
                                              '–ó–¥–µ—Å—å –≤—ã –∏–º–µ–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–µ—á–∏ –∏ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø—É—Ç–∞–Ω–∏—Ü—ã –≤ —Å–ª–æ–≤–∞—Ö üòÉ.\n\n'
                                              '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω üåü.\n'
                                              '–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§, –∞ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ—Ä–∞–∑—É, —Å–∫–∞–∑–∞–Ω–Ω—É—é –±–æ—Ç–æ–º, —Ç–µ–∫—Å—Ç–æ–º!\n\n'
                                              '–†–µ–≥–∏—Å—Ç—Ä –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç üòâ.\n'
                                              '–ì–æ—Ç–æ–≤—ã –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∞—É–¥–∏–æ–≤—ã–∑–æ–≤–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–µ—á–∏? üöÄüó£Ô∏è',
                             reply_markup=markup, parse_mode='Markdown')
        elif audio:
            bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∫–æ—Ä—è—Ç—å –≤–µ—Ä—à–∏–Ω—ã —Ä–µ–∂–∏–º–∞ *–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ*!\n"
                                              "–°–ª—É—à–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –∑–Ω–∞—á–∏—Ç –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –º–∏—Ä –º–∏—Ä–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π.",
                             reply_markup=markup, parse_mode='Markdown')
    elif message.text == "üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è":
        set_user_state(message.chat.id, None)
        set_user_state(message.chat.id, "daily")

        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –∑–∞—Ö–æ–¥–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"')

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)

        bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π! üéØ\n\n'
                                          f'–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∏ —É–ª—É—á—à–∞—Ç—å –∑–Ω–∞–Ω–∏—è.\n'
                                          f'–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å —Å –Ω–æ–≤—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏! üöÄ\n\n'
                                          f'–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –µ—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞–Ω–∏—è 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–∑ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞! üéÅ\n'
                                          f'–û–¥–Ω–∞–∫–æ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –¥–µ–Ω—å, –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ç–∞–∫ —á—Ç–æ –¥–µ—Ä–∂–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–µ —É–ø—É—Å–∫–∞–π—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è!\n\n'
                                          f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /daily üî•\n\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π: {get_days_completed(message.chat.id)}\n\n'
                                          f'–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{get_tasks(message.chat.id)}',
                         reply_markup=markup, parse_mode='Markdown')
    elif message.text == "‚ÅâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        set_user_state(message.chat.id, None)
        set_user_state(message.chat.id, "feedback")

        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –∑–∞—Ö–æ–¥–∏—Ç –≤ —Ä–∞–∑–¥–µ–ª "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"')

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)

        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª *"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"*\n\n'
                                          '–ó–¥–µ—Å—å –≤–∞—à –≥–æ–ª–æ—Å –∏–º–µ–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –±–∞–≥–∏, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ.\n'
                                          '–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â–µ –ª—É—á—à–µ.\n\n'
                                          '–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –∑–∞ –≤–∞—à–∏ —Ü–µ–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è! üôèü§ñ',
                         reply_markup=markup, parse_mode='Markdown')
    else:
        logger.info(f'{message.chat.username} - {message.chat.last_name} - {message.chat.first_name} | –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∂–∏–º–∞ - {message.text}')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–æ—Ç–∞ =)")


bot.polling(none_stop=True)
