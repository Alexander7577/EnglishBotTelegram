import logging
import telebot
from telebot import types
from config import TOKEN
from func import calculate_score, translate_and_send_response, send_answer_ai, send_voice_message, delete_punctuation_marks
from questions import questions_a0, questions_a1, questions_a2
import asyncio

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("my_logger")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
log_file_path = "my_log_file.txt"
file_handler = logging.FileHandler(log_file_path, encoding="utf-8")

# –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥–∞—Ö
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)

bot = telebot.TeleBot(TOKEN)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥—Å—á—ë—Ç –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
user_answers = {}
# –ü–æ–º–µ—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
user_audio_promotion = {}


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=["start", "help"])
def welcome(message: telebot.types.Message):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä–µ–∂–∏–º–æ–≤
    user_states[message.chat.id] = None
    user_answers[message.chat.id] = None
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üó£Ô∏è –û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞")
    item2 = types.KeyboardButton("üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
    item3 = types.KeyboardButton("üëÇ –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    item4 = types.KeyboardButton("‚úçÔ∏è –¢–µ—Å—Ç—ã")
    markup.add(item1, item2, item3, item4)

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {message.chat.first_name}!\n"
                                      f"–Ø –±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è üòä\n",
                     reply_markup=markup)
    logger.info(f'{message.chat.username} | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.first_name}')


# –†–µ–∂–∏–º "–†–∞–∑–≥–æ–≤–æ—Ä —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞"
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "conversation")
def conversation_handler(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        user_states[message.chat.id] = None
        logger.info(f'{message.chat.username} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –±–æ—Ç–æ–º')
        welcome(message)
    else:
        try:
            loading_message = bot.send_message(message.chat.id, "ü´†–ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            response = asyncio.run(send_answer_ai(bot, message, loading_message))
            logger.info(f'–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –±–æ—Ç–æ–º | {message.chat.username} - {message.text} | –ë–æ—Ç - {response}')
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(message.chat.id, "üî¥ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑")


# –†–µ–∂–∏–º "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "translating")
def translater(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        user_states[message.chat.id] = None
        logger.info(f'{message.chat.username} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞')
        welcome(message)
    else:
        loading_message = bot.send_message(message.chat.id, "ü´†–∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        translate_text = asyncio.run(translate_and_send_response(bot, message, loading_message))
        logger.info(f'–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ | {message.chat.username} - {message.text} | –ë–æ—Ç - {translate_text}')


# –†–µ–∂–∏–º "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "listening")
def listening_handler(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        user_states[message.chat.id] = None
        logger.info(f'{message.chat.username} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è')
        welcome(message)
    elif message.text in ["üòå –õ–µ–≥–∫–æ", "üòê –°—Ä–µ–¥–Ω–µ", "ü§Ø –°–ª–æ–∂–Ω–æ"]:
        logger.info(f'{message.chat.username} –í—ã–±–∏—Ä–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å {message.text} –≤ —Ä–µ–∂–∏–º–µ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ')
        text_phrase, voice_phrase, difficulty_lvl = send_voice_message(bot, user_audio_promotion, message)
        user_audio_promotion[message.chat.id]['difficulty_lvl'] = difficulty_lvl
        user_audio_promotion[message.chat.id]['right answer'] = text_phrase
        if voice_phrase:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            start_button = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            markup.add(start_button)

            user_states[message.chat.id] = 'audio_answer'
            bot.send_voice(message.chat.id, voice=voice_phrase, reply_markup=markup)
        else:
            logger.info(f"{message.chat.id} –Ω–∞–ø–∏—Å–∞–ª –≤—Å–µ —Ñ—Ä–∞–∑—ã —É—Ä–æ–≤–Ω—è {message.text}. –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ!!!")
            bot.send_message(message.chat.id, "–í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å–æ –≤—Å–µ–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ, Well done üëç")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ñ—Ä–∞–∑—É
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "audio_answer")
def check_phrase(message: telebot.types.Message):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –û–±—Ä–∞—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
        user_states[message.chat.id] = None
        logger.info(f"{message.chat.username} –Ω–µ –¥–∞–≤–∞—è –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        return handle_text(message, audio=True)

    logger.info(f"{message.chat.username} –¥–∞—ë—Ç –æ—Ç–≤–µ—Ç - {message.text}")
    # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    right_answer = delete_punctuation_marks(user_audio_promotion[message.chat.id]['right answer'])
    answer_from_user = delete_punctuation_marks(message.text)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª
    if right_answer == answer_from_user:
        bot.send_message(message.chat.id, "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ—Ä–∞–∑—É –≤–µ—Ä–Ω–æ, –æ—Ç–ª–∏—á–Ω–æ ‚úÖ")
        logger.info(f"{message.chat.username} –¥–∞—ë—Ç –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        user_audio_promotion[message.chat.id][f"{user_audio_promotion[message.chat.id]['difficulty_lvl']}"].remove(user_audio_promotion[message.chat.id]['right answer'])
    else:
        bot.send_message(message.chat.id, f"–í—ã –æ—à–∏–±–ª–∏—Å—å ‚ùå\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - {user_audio_promotion[message.chat.id]['right answer']}")
        logger.info(f"{message.chat.username} –¥–∞—ë—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")

    # –û–±—Ä–∞—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
    user_states[message.chat.id] = None
    logger.info(f"{message.chat.username} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
    handle_text(message, audio=True)


# –†–µ–∂–∏–º "–¢–µ—Å—Ç—ã"
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "tests")
def choice_test(message: telebot.types.Message):                                        # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        logger.info(f'{message.chat.username} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞')
        welcome(message)
    elif message.text in ["üòá A0", "üòå A1", "üòê A2"]:
        message.text = message.text.split()[1]
        user_states[message.chat.id] = None
        user_states[message.chat.id] = f"test_{message.text.lower()}"
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–∞ {message.text}")
        logger.info(f"{message.chat.username} –≤—ã–±–∏—Ä–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Å—Ç–∞ {message.text}")
        start_test(message)
    elif message.text in ["üò¨ B1", "üò® B2", "üò∞ C1", "ü§Ø C2"]:
        bot.send_message(message.chat.id,
                         "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –µ—â—ë –Ω–µ –ø—Ä–∏–¥—É–º–∞–Ω ü•∫\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ üòâ")
        logger.info(f"{message.chat.username} –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ—Å—Ç {message.text}, –º–æ–∂–µ—Ç –ø–æ—Ä–∞ –±—ã —É–∂–µ –ø—Ä–∏–¥—É–º–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç?")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) in ["test_a0", "test_a1", "test_a2"])
def start_test(message: telebot.types.Message):                 # –ó–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–≤–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        logger.info(f'{message.chat.username} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ç–µ—Å—Ç–∞ {user_states[message.chat.id]}')
        user_states[message.chat.id] = None
        user_answers[message.chat.id] = None
        return welcome(message)
    elif user_states[message.chat.id] == 'test_a0':
        user_states[message.chat.id] = 'test_a0_answers'
        test = questions_a0
    elif user_states[message.chat.id] == 'test_a1':
        user_states[message.chat.id] = 'test_a1_answers'
        test = questions_a1
    elif user_states[message.chat.id] == 'test_a2':
        user_states[message.chat.id] = 'test_a2_answers'
        test = questions_a2

    try:
        question_number = user_answers.get(message.chat.id)[0]
        right_questions = user_answers.get(message.chat.id)[1]
    except TypeError:
        question_number = 0
        right_questions = 0

    if question_number < len(test):
        # –í—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
        question = test[question_number]["question"]
        options = test[question_number]["options"]

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for option in options:
            markup.add(types.KeyboardButton(option))

        bot.send_message(message.chat.id, f"–í–æ–ø—Ä–æ—Å: {question_number + 1}/{len(test)}\n\n*{question}*",
                         reply_markup=markup, parse_mode='Markdown')
        logger.info(f"{question_number + 1}/{len(test)} | –ë–æ—Ç –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –¥–ª—è {message.chat.username} - {question}")
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        user_answers[message.chat.id] = None
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)
        result = calculate_score(len(test), right_questions)
        bot.send_message(message.chat.id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {right_questions}/{len(test)}\n\n{result}",
                         reply_markup=markup)
        logger.info(
            f"{message.chat.username} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç! –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {right_questions}/{len(test)} | {result}")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) in ["test_a0_answers", "test_a1_answers", "test_a2_answers"])
def handle_test_answer(message: telebot.types.Message):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
        logger.info(f'{message.chat.username} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ç–µ—Å—Ç–∞ {user_states[message.chat.id]}')
        user_states[message.chat.id] = None
        user_answers[message.chat.id] = None
        return welcome(message)
    elif user_states[message.chat.id] == "test_a0_answers":
        user_states[message.chat.id] = "test_a0"
        test = questions_a0
    elif user_states[message.chat.id] == "test_a1_answers":
        user_states[message.chat.id] = "test_a1"
        test = questions_a1
    elif user_states[message.chat.id] == "test_a2_answers":
        user_states[message.chat.id] = "test_a2"
        test = questions_a2

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
    next_button = types.KeyboardButton("–î–∞–ª–µ–µ ‚û°Ô∏è")
    markup.add(start_button, next_button)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    try:
        question_number = user_answers.get(message.chat.id)[0]
        right_questions = user_answers.get(message.chat.id)[1]
    except TypeError:
        question_number = 0
        right_questions = 0

    correct_option = test[question_number]["correct_option"]
    user_answer = message.text
    logger.info(f'{message.chat.username} –¥–∞—ë—Ç –æ—Ç–≤–µ—Ç - {user_answer}')

    if user_answer == correct_option:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        right_questions += 1
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç", reply_markup=markup)
        logger.info(f'{message.chat.username} –¥–∞—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!')
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
        bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option} üëé", reply_markup=markup)
        logger.info(f'{message.chat.username} –¥–∞—ë—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!')

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_answers[message.chat.id] = [question_number + 1, right_questions]


@bot.message_handler(content_types=["text"])
def handle_text(message: telebot.types.Message, audio=False):
    if message.text == "üó£Ô∏è –û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞":
        logger.info(f'{message.chat.username} –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[message.chat.id] = None
        user_states[message.chat.id] = "conversation"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)

        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º "–û–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º —è–∑—ã–∫–∞" üó£Ô∏è\n\n'
                                          '–ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã, –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —è–∑—ã–∫–∞ –∏ –º–Ω–æ–≥–æ–º—É –¥—Ä—É–≥–æ–º—É üöÄ\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç',
                         reply_markup=markup)
    elif message.text == "üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫":
        logger.info(f'{message.chat.username} –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[message.chat.id] = None
        user_states[message.chat.id] = "translating"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(start_button)

        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üìù", reply_markup=markup)
    elif message.text == "‚úçÔ∏è –¢–µ—Å—Ç—ã":
        logger.info(f'{message.chat.username} –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤')
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[message.chat.id] = None
        user_states[message.chat.id] = "tests"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        a0 = types.KeyboardButton("üòá A0")
        a1 = types.KeyboardButton("üòå A1")
        a2 = types.KeyboardButton("üòê A2")
        b1 = types.KeyboardButton("üò¨ B1")
        b2 = types.KeyboardButton("üò® B2")
        c1 = types.KeyboardButton("üò∞ C1")
        c2 = types.KeyboardButton("ü§Ø C2")
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        markup.add(a0, a1, a2, b1, b2, c1, c2, start_button)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∞", reply_markup=markup)
    elif message.text == "üëÇ –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ" or audio:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è audio True, –∑–Ω–∞—á–∏—Ç –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[message.chat.id] = None
        user_states[message.chat.id] = "listening"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        start_button = types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ")
        easy_lvl = types.KeyboardButton("üòå –õ–µ–≥–∫–æ")
        medium_lvl = types.KeyboardButton("üòê –°—Ä–µ–¥–Ω–µ")
        hard_lvl = types.KeyboardButton("ü§Ø –°–ª–æ–∂–Ω–æ")
        markup.add(easy_lvl, medium_lvl, hard_lvl, start_button)

        if not audio:
            logger.info(f'{message.chat.username} –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ')
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º *–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ*! üëÇ\n'
                                              '–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è –ø–æ–Ω–∏–º–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ä–µ—á—å –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø—É—Ç–∞—Ç—å—Å—è –≤ —Å–ª–æ–≤–∞—Ö üòÉ\n\n'
                                              '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –¥–ª—è –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ üåü\n\n'
                                              '–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§\n\n–§—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é —Å–∫–∞–∂–µ—Ç –±–æ—Ç, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º!\n'
                                              '–†–µ–≥–∏—Å—Ç—Ä –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç üòâ',
                             reply_markup=markup, parse_mode='Markdown')
        elif audio:
            bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∫–æ—Ä—è—Ç—å –≤–µ—Ä—à–∏–Ω—ã —Ä–µ–∂–∏–º–∞ *–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ*!\n"
                                              "–°–ª—É—à–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –∑–Ω–∞—á–∏—Ç –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –º–∏—Ä –º–∏—Ä–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä—ã, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π.",
                             reply_markup=markup, parse_mode='Markdown')
    else:
        logger.info(f'{message.chat.username} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∂–∏–º–∞ | {message.text}')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–æ—Ç–∞ =)")


bot.polling(none_stop=True)
