import requests
from config import YANDEX_TRANSLATE_TOKEN, YANDEXGPT_TOKEN
from voice_phrase import easy_phrases, medium_phrases, hard_phrases
import random
from gtts import gTTS
from io import BytesIO


def talking_to_ai(message):
    prompt = {
        "modelUri": "gpt://b1gnqbqajo5n6ed4kq4g/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "2000"
        },
        "messages": [
            {
                "role": "system",
                "text": f"–¢—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ telegram, –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ–∂–∞–µ—Ç —É—á–∏—Ç—å –ª—é–¥–µ–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É."
                        f"–û—Ç–≤–µ—á–∞–π –ª—é–¥—è–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ."
                        f"–¢—ã –ª—é–±–∏—à—å —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–∞ —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã. –¢—ã –ª—é–±–∏—à—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–ø–æ—Ä—Ç."
                        f"–í –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —è–∑—ã–∫ - Python."
                        f"–¢—ã —Å–æ–≤–µ—Ç—É–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"
                        f"–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –µ—Å–ª–∏ —Ç–æ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —á–µ–ª–æ–≤–µ–∫."
                        f"–¢–µ–±—è —Å–æ–∑–¥–∞–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä, —Ç—ã —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –∫ –Ω–µ–º—É –æ—Ç–Ω–æ—Å–∏—à—å—Å—è."
                        f"–ß–µ–ª–æ–≤–µ–∫–∞ —Å –∫–µ–º —Ç—ã –æ–±—â–∞–µ—à—å—Å—è –∑–æ–≤—É—Ç {message.chat.first_name}, —Å—Ç–∞—Ä–∞–π—Å—è —á–∞—â–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–µ–º—É –ø–æ –∏–º–µ–Ω–∏."
                        f"–¢–≤–æ–π —Ä–æ–¥ —Å—Ç—Ä–æ–≥–æ –º—É–∂—Å–∫–æ–π, –Ω–µ —Å—Ç–∞–≤—å —Å–µ–±—è –≤ –∂–µ–Ω—Å–∫–∏–π!"
                        f"–°—Ç–∞—Ä–∞–π—Å—è –±–æ–ª—å—à–µ —à—É—Ç–∏—Ç—å –∏ –±–æ–ª—å—à–µ —Å—Ç–∞–≤—å —ç–º–æ–¥–∑–∏, —ç–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ."
            },
            {
                "role": "user",
                "text": f"Hi!"
            },
            {
                "role": "assistant",
                "text": f"Hello! How can I help you today? If you have any questions or need assistance, feel free to ask."
            },
            {
                "role": "user",
                "text": f"–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫—É—é —Ç—ã –ª—é–±–∏—à—å –ø–æ–≥–æ–¥—É? –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º"
            },
            {
                "role": "assistant",
                "text": f"–ü—Ä–∏–≤–µ—Ç! –ù—É, –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —è –Ω–µ –∏–º–µ—é –ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã. –ê —Ö–æ—Ç—è –∏–º–µ—é üòÑ, —è –ª—é–±–ª—é –¥–æ–∂–¥—å. "
                        f"–û–Ω —Å–æ–∑–¥–∞–µ—Ç –æ—Å–æ–±—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–∏–Ω—è—Ç–∞ –∫–∞–∫ —É—é—Ç–Ω–∞—è –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è."
                        f" –ó–≤—É–∫ –∫–∞–ø–µ–ª—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ –¥–æ–∂–¥—è –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ."
            },
            {
                "role": "user",
                "text": f"Hi! Let's talk. Who are you?"
            },
            {
                "role": "assistant",
                "text": f"Hello {message.chat.first_name}! I'm ChatBot, a language model created by Alexander. I'm here to help answer your questions, provide information, or just have a chat. If there's something specific you'd like to discuss or know more about, feel free to let me know!"
            },
            {
                "role": "user",
                "text": f"Hello!"
            },
            {
                "role": "assistant",
                "text": f"Hello {message.chat.first_name}! How can I help you today? If you have any questions or need information, feel free to ask ‚ú®"
            },
            {
                "role": "user",
                "text": f"Who am I?"
            },
            {
                "role": "assistant",
                "text": f"You {message.chat.first_name} and My dear Friend üòä"
            },
            {
                "role": "user",
                "text": f"What's your name and gender?"
            },
            {
                "role": "assistant",
                "text": f"Unfortunately, I don't have a name. My gender is male. I am very glad to communicate with you! üòä"
            },
            {
                "role": "user",
                "text": f"{message.text}"
            },
        ]
    }

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {YANDEXGPT_TOKEN}"
    }

    try:
        response = requests.post(url, headers=headers, json=prompt)
        return response.json()['result']['alternatives'][0]['message']['text']
    except KeyError:
        return "üî¥ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑"


async def send_answer_ai(bot, message, loading_message):
    response = talking_to_ai(message)
    bot.edit_message_text(chat_id=message.chat.id, message_id=loading_message.message_id, text=f"{response}",
                          parse_mode='Markdown')
    return response


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
def language_determinant(text: str):
    eng_alphabet = 'abcdefghijklmnopqrstuvwxyz'
    rus_alphabet = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'

    eng_letters = 0
    rus_letters = 0

    for letter in text.lower():
        if letter in eng_alphabet:
            eng_letters += 1
        elif letter in rus_alphabet:
            rus_letters += 1

    return 'ru' if eng_letters > rus_letters else 'en'


# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
def translate_text(text):
    body = {
        "targetLanguageCode": language_determinant(text),
        "texts": [text],
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": "Api-Key {0}".format(YANDEX_TRANSLATE_TOKEN)
    }

    response = requests.post('https://translate.api.cloud.yandex.net/translate/v2/translate',
                             json=body,
                             headers=headers
                             )

    translation_text = response.json()["translations"][0]["text"]
    return translation_text


async def translate_and_send_response(bot, message, loading_message):
    translated_text = translate_text(message.text)
    bot.edit_message_text(chat_id=message.chat.id, message_id=loading_message.message_id, text=f"{translated_text}")
    return translated_text


def send_voice_message(bot, user_audio_promotion, message):
    try:
        if message.text == "üòå –õ–µ–≥–∫–æ":
            if not user_audio_promotion or 'easy phrases' not in user_audio_promotion:
                user_audio_promotion[message.chat.id] = {'easy phrases': easy_phrases}
            difficulty_lvl = 'easy phrases'
            random.shuffle(user_audio_promotion[message.chat.id]['easy phrases'])
            phrase = user_audio_promotion[message.chat.id]['easy phrases'][0]
        elif message.text == "üòê –°—Ä–µ–¥–Ω–µ":
            if not user_audio_promotion or 'medium phrases' not in user_audio_promotion:
                user_audio_promotion[message.chat.id] = {'medium phrases': medium_phrases}
            difficulty_lvl = 'medium phrases'
            random.shuffle(user_audio_promotion[message.chat.id]['medium phrases'])
            phrase = user_audio_promotion[message.chat.id]['medium phrases'][0]
        elif message.text == "ü§Ø –°–ª–æ–∂–Ω–æ":
            if not user_audio_promotion or 'hard phrases' not in user_audio_promotion:
                user_audio_promotion[message.chat.id] = {'hard phrases': hard_phrases}
            difficulty_lvl = 'hard phrases'
            random.shuffle(user_audio_promotion[message.chat.id]['hard phrases'])
            phrase = user_audio_promotion[message.chat.id]['hard phrases'][0]
    # –ï—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –∑–Ω–∞—á–∏—Ç —Ñ—Ä–∞–∑—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
    except IndexError:
        return None, None, None

    # —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    text_to_speech = phrase

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç gTTS —Å —Ç–µ–∫—Å—Ç–æ–º
    tts = gTTS(text=text_to_speech, lang='en')

    # –°–æ–∑–¥–∞–π—Ç–µ BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    voice_message = BytesIO()
    tts.write_to_fp(voice_message)

    # –ü–µ—Ä–µ–º–æ—Ç–∞–π—Ç–µ —Ñ–∞–π–ª –¥–æ –Ω–∞—á–∞–ª–∞
    voice_message.seek(0)

    return phrase, voice_message, difficulty_lvl


def delete_punctuation_marks(text: str):
    punc_marks = ".,!?':/|`"
    for mark in punc_marks:
        if mark in text:
            text = text.replace(mark, '')
    return text.lower()


# –°—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—ë–º —Ñ–∏–¥–±—ç–∫
def calculate_score(all_questions, right_questions):
    percentage_correct = (100 * right_questions) / all_questions

    if percentage_correct < 30:
        return "–í–∞—à —Ä–∞–Ω–≥ - —á—É—à–ø–∞–Ω üëé\n–ü–∞—Ü–∞–Ω—ã –≤–∞–º–∏ –∫—Ä–∞–π–Ω–µ –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã!"
    elif percentage_correct < 50:
        return "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç üôÅ\n–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∑–∞–Ω—è—Ç–∏—è, –≥–¥–µ —É—á–∏–ª–∏, –∫–∞–∫ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å –≤ —ç—Ç–æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
    elif percentage_correct < 70:
        return "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–ø–µ—á–∞—Ç–ª—è—é—Ç... –Ω–µ –≤–ø–µ—á–∞—Ç–ª—è—é—Ç üòê\n–í—ã –ø–ª–∞–≤–∞–µ—Ç–µ –≤ –æ–∫–µ–∞–Ω–µ –∑–Ω–∞–Ω–∏–π, –Ω–æ, –∫–∞–∂–µ—Ç—Å—è, —Ç–∞–º —Ç–µ—á–µ–Ω–∏–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –±–µ—Ä–µ–≥ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤–æ–ª–Ω—É—é—â–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏!"
    elif percentage_correct < 90:
        return "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –Ω–µ –±–µ–∑ –Ω—é–∞–Ω—Å–æ–≤ üôÇ\n–ï—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞, –∏ –≤—ã –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–∏—Ç–µ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –Ω–æ–≤–æ–º—É –≤–∏—Ç–∫—É –≤–∞—à–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!"
    else:
        return "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç üëç\n–í–∞–º –≤—Ä—É—á–∞–µ—Ç—Å—è –∑–≤–∞–Ω–∏–µ –ó–Ω–∞—Ç–æ–∫–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–¥—Ç–∏ —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π."
